/**
 * Tienda de Carpinteria - OpenAPI 3.0
 * Tienda web de carpinteria
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: desarrolloweb@tiendaweb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ResponseContainerResponseDTO from '../com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO';
import UserDTO from '../com.eduit.bootcamp.cart-ui.model/UserDTO';
import UserRequestDTO from '../com.eduit.bootcamp.cart-ui.model/UserRequestDTO';
import UserRoleRequestDTO from '../com.eduit.bootcamp.cart-ui.model/UserRoleRequestDTO';

/**
* User service.
* @module com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/UserApi
* @version 1.0.0
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/UserApi
    * @class
    * @param {module:com.eduit.bootcamp.cart-ui/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:com.eduit.bootcamp.cart-ui/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addRoleToUser operation.
     * @callback module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/UserApi~addRoleToUserCallback
     * @param {String} error Error message, if any.
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add role to a user
     * Add a role to a user, authentication required.
     * @param {Number} userDni the user id
     * @param {Number} roleId the role id
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/UserApi~addRoleToUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO}
     */
    addRoleToUser(userDni, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'userDni' is set
      if (userDni === undefined || userDni === null) {
        throw new Error("Missing the required parameter 'userDni' when calling addRoleToUser");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling addRoleToUser");
      }

      let pathParams = {
        'userDni': userDni,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseContainerResponseDTO;
      return this.apiClient.callApi(
        '/users/user/{userDni}/role/{roleId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRole operation.
     * @callback module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/UserApi~createRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create roles
     * Create a roles, authentication required.
     * @param {Object} opts Optional parameters
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/UserRoleRequestDTO} opts.userRoleRequestDTO Created roles object
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/UserApi~createRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO}
     */
    createRole(opts, callback) {
      opts = opts || {};
      let postBody = opts['userRoleRequestDTO'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseContainerResponseDTO;
      return this.apiClient.callApi(
        '/users/role', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/UserApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create user
     * Create a user, authentication required.
     * @param {Object} opts Optional parameters
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/UserRequestDTO} opts.userRequestDTO Created user object
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/UserApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO}
     */
    createUser(opts, callback) {
      opts = opts || {};
      let postBody = opts['userRequestDTO'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseContainerResponseDTO;
      return this.apiClient.callApi(
        '/users/add-user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/UserApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete user
     * Delete a user, authentication required.
     * @param {Number} userDni the user DNI
     * @param {Object} opts Optional parameters
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/UserDTO} opts.userDTO Created user object
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/UserApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO}
     */
    deleteUser(userDni, opts, callback) {
      opts = opts || {};
      let postBody = opts['userDTO'];
      // verify the required parameter 'userDni' is set
      if (userDni === undefined || userDni === null) {
        throw new Error("Missing the required parameter 'userDni' when calling deleteUser");
      }

      let pathParams = {
        'userDni': userDni
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseContainerResponseDTO;
      return this.apiClient.callApi(
        '/users/user/{userDni}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserRoles operation.
     * @callback module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/UserApi~getUserRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the roles from a user.
     * Retrieve the roles from a user, authentication required.
     * @param {Number} userDni the user id
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/UserApi~getUserRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO}
     */
    getUserRoles(userDni, callback) {
      let postBody = null;
      // verify the required parameter 'userDni' is set
      if (userDni === undefined || userDni === null) {
        throw new Error("Missing the required parameter 'userDni' when calling getUserRoles");
      }

      let pathParams = {
        'userDni': userDni
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseContainerResponseDTO;
      return this.apiClient.callApi(
        '/users/user/{userDni}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeRoleToUser operation.
     * @callback module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/UserApi~removeRoleToUserCallback
     * @param {String} error Error message, if any.
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove role from a user
     * Remove a role from a user, authentication required.
     * @param {Number} userDni the user id
     * @param {Number} roleId the role id
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/UserApi~removeRoleToUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO}
     */
    removeRoleToUser(userDni, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'userDni' is set
      if (userDni === undefined || userDni === null) {
        throw new Error("Missing the required parameter 'userDni' when calling removeRoleToUser");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling removeRoleToUser");
      }

      let pathParams = {
        'userDni': userDni,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseContainerResponseDTO;
      return this.apiClient.callApi(
        '/users/user/{userDni}/role/{roleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAllRoles operation.
     * @callback module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/UserApi~retrieveAllRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of roles
     * Retrieve a list of roles, authentication required.
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/UserApi~retrieveAllRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO}
     */
    retrieveAllRoles(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseContainerResponseDTO;
      return this.apiClient.callApi(
        '/users/role', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAllUsers operation.
     * @callback module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/UserApi~retrieveAllUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of users
     * Retrieve a list of users, authentication required.
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/UserApi~retrieveAllUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO}
     */
    retrieveAllUsers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseContainerResponseDTO;
      return this.apiClient.callApi(
        '/users/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveUser operation.
     * @callback module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/UserApi~retrieveUserCallback
     * @param {String} error Error message, if any.
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a user
     * Retrieve a user, authentication required.
     * @param {Number} userDni the user DNI
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/UserApi~retrieveUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO}
     */
    retrieveUser(userDni, callback) {
      let postBody = null;
      // verify the required parameter 'userDni' is set
      if (userDni === undefined || userDni === null) {
        throw new Error("Missing the required parameter 'userDni' when calling retrieveUser");
      }

      let pathParams = {
        'userDni': userDni
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseContainerResponseDTO;
      return this.apiClient.callApi(
        '/users/user/{userDni}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/UserApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user
     * Update a user, authentication required.
     * @param {Number} userDni the user dni
     * @param {Object} opts Optional parameters
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/UserDTO} opts.userDTO Updated user object
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/UserApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO}
     */
    updateUser(userDni, opts, callback) {
      opts = opts || {};
      let postBody = opts['userDTO'];
      // verify the required parameter 'userDni' is set
      if (userDni === undefined || userDni === null) {
        throw new Error("Missing the required parameter 'userDni' when calling updateUser");
      }

      let pathParams = {
        'userDni': userDni
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseContainerResponseDTO;
      return this.apiClient.callApi(
        '/users/user/{userDni}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
