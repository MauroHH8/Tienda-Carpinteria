/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tienda.web.tiendacarpinteria.api;

import com.tienda.web.tiendacarpinteria.model.ResponseContainerResponseDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-06T17:56:51.845809700-03:00[America/Buenos_Aires]")
@Validated
@Tag(name = "token", description = "Operations about login")
public interface TokenApi {

    default TokenApiDelegate getDelegate() {
        return new TokenApiDelegate() {};
    }

    /**
     * POST /token/login : Create a user session
     * Create a user session
     *
     * @param username the username to authenticate (required)
     * @param password the password to authenticate (required)
     * @return successful operation response a JWTResponseDTO as data (status code 200)
     */
    @Operation(
        operationId = "login",
        summary = "Create a user session",
        tags = { "login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation response a JWTResponseDTO as data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/token/login",
        produces = { "application/json" }
    )
    default ResponseEntity<ResponseContainerResponseDTO> login(
        @NotNull @Parameter(name = "username", description = "the username to authenticate", required = true) @Valid @RequestParam(value = "username", required = true) String username,
        @NotNull @Parameter(name = "password", description = "the password to authenticate", required = true) @Valid @RequestParam(value = "password", required = true) String password
    ) {
        return getDelegate().login(username, password);
    }


    /**
     * PATCH /token/refresh : refresh a token
     * Refresh a token, authentication required.
     *
     * @param authorization authentication token (required)
     * @return successful operation response a JWTResponseDTO as data (status code 200)
     */
    @Operation(
        operationId = "refreshToken",
        summary = "refresh a token",
        tags = { "login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation response a JWTResponseDTO as data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/token/refresh",
        produces = { "application/json" }
    )
    default ResponseEntity<ResponseContainerResponseDTO> refreshToken(
        @Parameter(name = "Authorization", description = "authentication token", required = true) @RequestHeader(value = "Authorization", required = true) String authorization
    ) {
        return getDelegate().refreshToken(authorization);
    }

}
