/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tienda.web.tiendacarpinteria.api;

import com.tienda.web.tiendacarpinteria.model.CategoryDTO;
import com.tienda.web.tiendacarpinteria.model.CategoryRequestDTO;
import com.tienda.web.tiendacarpinteria.model.ProductDTO;
import com.tienda.web.tiendacarpinteria.model.ProductRequestDTO;
import com.tienda.web.tiendacarpinteria.model.ResponseContainerResponseDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-06T17:56:51.845809700-03:00[America/Buenos_Aires]")
@Validated
@Tag(name = "products", description = "Everything about backoffice endpoints")
public interface ProductsApi {

    default ProductsApiDelegate getDelegate() {
        return new ProductsApiDelegate() {};
    }

    /**
     * POST /products/category : Create category
     * Create a category, authentication required.
     *
     * @param categoryRequestDTO Created category object (optional)
     * @return successful operation response a CategoryDTO as data (status code 200)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "createCategory",
        summary = "Create category",
        tags = { "backoffice" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation response a CategoryDTO as data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/products/category",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ResponseContainerResponseDTO> createCategory(
        @Parameter(name = "CategoryRequestDTO", description = "Created category object") @Valid @RequestBody(required = false) CategoryRequestDTO categoryRequestDTO
    ) {
        return getDelegate().createCategory(categoryRequestDTO);
    }


    /**
     * POST /products/product : Create product
     * Create a product, authentication required.
     *
     * @param productRequestDTO Created product object (optional)
     * @return successful operation response a ProductDTO as data (status code 200)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "createProduct",
        summary = "Create product",
        tags = { "backoffice" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation response a ProductDTO as data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/products/product",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ResponseContainerResponseDTO> createProduct(
        @Parameter(name = "ProductRequestDTO", description = "Created product object") @Valid @RequestBody(required = false) ProductRequestDTO productRequestDTO
    ) {
        return getDelegate().createProduct(productRequestDTO);
    }


    /**
     * DELETE /products/category/{categoryId} : Delete category
     * Delete a category, authentication required.
     *
     * @param categoryId the category id (required)
     * @return successful operation response a EmptyResponseDTO as data (status code 200)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "deleteCategory",
        summary = "Delete category",
        tags = { "backoffice" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation response a EmptyResponseDTO as data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/products/category/{categoryId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ResponseContainerResponseDTO> deleteCategory(
        @Parameter(name = "categoryId", description = "the category id", required = true) @PathVariable("categoryId") Long categoryId
    ) {
        return getDelegate().deleteCategory(categoryId);
    }


    /**
     * DELETE /products/product/{productId} : Delete product
     * Delete a product, authentication required.
     *
     * @param productId the product id (required)
     * @return successful operation response a EmptyResponseDTO as data (status code 200)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "deleteProduct",
        summary = "Delete product",
        tags = { "backoffice" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation response a EmptyResponseDTO as data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/products/product/{productId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ResponseContainerResponseDTO> deleteProduct(
        @Parameter(name = "productId", description = "the product id", required = true) @PathVariable("productId") Long productId
    ) {
        return getDelegate().deleteProduct(productId);
    }


    /**
     * GET /products/category : Retrieve a list of category
     * Retrieve a list of category.
     *
     * @return successful operation response a CategoryListDTO as data (status code 200)
     */
    @Operation(
        operationId = "retrieveAllCategory",
        summary = "Retrieve a list of category",
        tags = { "backoffice" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation response a CategoryListDTO as data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products/category",
        produces = { "application/json" }
    )
    default ResponseEntity<ResponseContainerResponseDTO> retrieveAllCategory(
        
    ) {
        return getDelegate().retrieveAllCategory();
    }


    /**
     * GET /products/product : Retrieve a list of products
     * Retrieve a list of products.
     *
     * @return successful operation response a ProductListDTO as data (status code 200)
     */
    @Operation(
        operationId = "retrieveAllProducts",
        summary = "Retrieve a list of products",
        tags = { "backoffice" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation response a ProductListDTO as data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products/product",
        produces = { "application/json" }
    )
    default ResponseEntity<ResponseContainerResponseDTO> retrieveAllProducts(
        
    ) {
        return getDelegate().retrieveAllProducts();
    }


    /**
     * GET /products/category/{categoryId} : Retrieve category
     * Retrieve a category, authentication required.
     *
     * @param categoryId the category id (required)
     * @return successful operation response a CategoryDTO as data (status code 200)
     */
    @Operation(
        operationId = "retrieveCategory",
        summary = "Retrieve category",
        tags = { "backoffice" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation response a CategoryDTO as data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products/category/{categoryId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ResponseContainerResponseDTO> retrieveCategory(
        @Parameter(name = "categoryId", description = "the category id", required = true) @PathVariable("categoryId") Long categoryId
    ) {
        return getDelegate().retrieveCategory(categoryId);
    }


    /**
     * GET /products/product/{productId} : Retrieve product
     * Retrieve a product, authentication required.
     *
     * @param productId the product id (required)
     * @return successful operation response a ProductDTO as data (status code 200)
     */
    @Operation(
        operationId = "retrieveProduct",
        summary = "Retrieve product",
        tags = { "backoffice" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation response a ProductDTO as data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products/product/{productId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ResponseContainerResponseDTO> retrieveProduct(
        @Parameter(name = "productId", description = "the product id", required = true) @PathVariable("productId") Long productId
    ) {
        return getDelegate().retrieveProduct(productId);
    }


    /**
     * PUT /products/category/{categoryId} : Update category
     * Update a category, authentication required.
     *
     * @param categoryId the category id (required)
     * @param categoryDTO Updated category object (optional)
     * @return successful operation response a CategoryDTO as data (status code 200)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "updateCategory",
        summary = "Update category",
        tags = { "backoffice" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation response a CategoryDTO as data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/products/category/{categoryId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ResponseContainerResponseDTO> updateCategory(
        @Parameter(name = "categoryId", description = "the category id", required = true) @PathVariable("categoryId") Long categoryId,
        @Parameter(name = "CategoryDTO", description = "Updated category object") @Valid @RequestBody(required = false) CategoryDTO categoryDTO
    ) {
        return getDelegate().updateCategory(categoryId, categoryDTO);
    }


    /**
     * PUT /products/product/{productId} : Update product
     * Update a product, authentication required.
     *
     * @param productId the product id (required)
     * @param productDTO Updated product object (optional)
     * @return successful operation response a ProductDTO as data (status code 200)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "updateProduct",
        summary = "Update product",
        tags = { "backoffice" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation response a ProductDTO as data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/products/product/{productId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ResponseContainerResponseDTO> updateProduct(
        @Parameter(name = "productId", description = "the product id", required = true) @PathVariable("productId") Long productId,
        @Parameter(name = "ProductDTO", description = "Updated product object") @Valid @RequestBody(required = false) ProductDTO productDTO
    ) {
        return getDelegate().updateProduct(productId, productDTO);
    }

}
