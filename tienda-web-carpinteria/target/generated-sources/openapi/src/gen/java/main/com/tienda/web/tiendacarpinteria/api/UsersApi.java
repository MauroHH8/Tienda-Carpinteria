/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tienda.web.tiendacarpinteria.api;

import com.tienda.web.tiendacarpinteria.model.ResponseContainerResponseDTO;
import com.tienda.web.tiendacarpinteria.model.UserDTO;
import com.tienda.web.tiendacarpinteria.model.UserRequestDTO;
import com.tienda.web.tiendacarpinteria.model.UserRoleRequestDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-06T17:56:51.845809700-03:00[America/Buenos_Aires]")
@Validated
@Tag(name = "users", description = "Operations about user")
public interface UsersApi {

    default UsersApiDelegate getDelegate() {
        return new UsersApiDelegate() {};
    }

    /**
     * POST /users/user/{userDni}/role/{roleId} : Add role to a user
     * Add a role to a user, authentication required.
     *
     * @param userDni the user id (required)
     * @param roleId the role id (required)
     * @return successful operation response a EmptyResponseDTO as data (status code 200)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "addRoleToUser",
        summary = "Add role to a user",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation response a EmptyResponseDTO as data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/user/{userDni}/role/{roleId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ResponseContainerResponseDTO> addRoleToUser(
        @Parameter(name = "userDni", description = "the user id", required = true) @PathVariable("userDni") Integer userDni,
        @Parameter(name = "roleId", description = "the role id", required = true) @PathVariable("roleId") Long roleId
    ) {
        return getDelegate().addRoleToUser(userDni, roleId);
    }


    /**
     * POST /users/role : Create roles
     * Create a roles, authentication required.
     *
     * @param userRoleRequestDTO Created roles object (optional)
     * @return successful operation response a UserRoleDTO as data (status code 200)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "createRole",
        summary = "Create roles",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation response a UserRoleDTO as data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/role",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ResponseContainerResponseDTO> createRole(
        @Parameter(name = "UserRoleRequestDTO", description = "Created roles object") @Valid @RequestBody(required = false) UserRoleRequestDTO userRoleRequestDTO
    ) {
        return getDelegate().createRole(userRoleRequestDTO);
    }


    /**
     * POST /users/add-user : Create user
     * Create a user, authentication required.
     *
     * @param userRequestDTO Created user object (optional)
     * @return successful operation response a UserDTO as data (status code 200)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "createUser",
        summary = "Create user",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation response a UserDTO as data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/add-user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ResponseContainerResponseDTO> createUser(
        @Parameter(name = "UserRequestDTO", description = "Created user object") @Valid @RequestBody(required = false) UserRequestDTO userRequestDTO
    ) {
        return getDelegate().createUser(userRequestDTO);
    }


    /**
     * DELETE /users/user/{userDni} : Delete user
     * Delete a user, authentication required.
     *
     * @param userDni the user DNI (required)
     * @param userDTO Created user object (optional)
     * @return successful operation  response a EmptyResponseDTO as data (status code 200)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "Delete user",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation  response a EmptyResponseDTO as data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/user/{userDni}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ResponseContainerResponseDTO> deleteUser(
        @Parameter(name = "userDni", description = "the user DNI", required = true) @PathVariable("userDni") Integer userDni,
        @Parameter(name = "UserDTO", description = "Created user object") @Valid @RequestBody(required = false) UserDTO userDTO
    ) {
        return getDelegate().deleteUser(userDni, userDTO);
    }


    /**
     * GET /users/user/{userDni}/roles : Retrieve the roles from a user.
     * Retrieve the roles from a user, authentication required.
     *
     * @param userDni the user id (required)
     * @return successful operation response a UserRoleListDTO as data (status code 200)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "getUserRoles",
        summary = "Retrieve the roles from a user.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation response a UserRoleListDTO as data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/user/{userDni}/roles",
        produces = { "application/json" }
    )
    default ResponseEntity<ResponseContainerResponseDTO> getUserRoles(
        @Parameter(name = "userDni", description = "the user id", required = true) @PathVariable("userDni") Integer userDni
    ) {
        return getDelegate().getUserRoles(userDni);
    }


    /**
     * DELETE /users/user/{userDni}/role/{roleId} : Remove role from a user
     * Remove a role from a user, authentication required.
     *
     * @param userDni the user id (required)
     * @param roleId the role id (required)
     * @return successful operation response a EmptyResponseDTO as data (status code 200)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "removeRoleToUser",
        summary = "Remove role from a user",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation response a EmptyResponseDTO as data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/user/{userDni}/role/{roleId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ResponseContainerResponseDTO> removeRoleToUser(
        @Parameter(name = "userDni", description = "the user id", required = true) @PathVariable("userDni") Integer userDni,
        @Parameter(name = "roleId", description = "the role id", required = true) @PathVariable("roleId") Long roleId
    ) {
        return getDelegate().removeRoleToUser(userDni, roleId);
    }


    /**
     * GET /users/role : Retrieve a list of roles
     * Retrieve a list of roles, authentication required.
     *
     * @return successful operation response a UserRoleListDTO as data (status code 200)
     */
    @Operation(
        operationId = "retrieveAllRoles",
        summary = "Retrieve a list of roles",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation response a UserRoleListDTO as data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/role",
        produces = { "application/json" }
    )
    default ResponseEntity<ResponseContainerResponseDTO> retrieveAllRoles(
        
    ) {
        return getDelegate().retrieveAllRoles();
    }


    /**
     * GET /users/list : Retrieve a list of users
     * Retrieve a list of users, authentication required.
     *
     * @return successful operation response a UserListDTO as data (status code 200)
     */
    @Operation(
        operationId = "retrieveAllUsers",
        summary = "Retrieve a list of users",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation response a UserListDTO as data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/list",
        produces = { "application/json" }
    )
    default ResponseEntity<ResponseContainerResponseDTO> retrieveAllUsers(
        
    ) {
        return getDelegate().retrieveAllUsers();
    }


    /**
     * GET /users/user/{userDni} : Retrieve a user
     * Retrieve a user, authentication required.
     *
     * @param userDni the user DNI (required)
     * @return successful operation response a UserDTO as data (status code 200)
     */
    @Operation(
        operationId = "retrieveUser",
        summary = "Retrieve a user",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation response a UserDTO as data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/user/{userDni}",
        produces = { "application/json" }
    )
    default ResponseEntity<ResponseContainerResponseDTO> retrieveUser(
        @Parameter(name = "userDni", description = "the user DNI", required = true) @PathVariable("userDni") Integer userDni
    ) {
        return getDelegate().retrieveUser(userDni);
    }


    /**
     * GET /users/user/{email} : Retrieve a user
     * Retrieve a user, authentication required.
     *
     * @param email the user email (required)
     * @return successful operation response a UserDTO as data (status code 200)
     */
    @Operation(
        operationId = "retrieveUserbyEmail",
        summary = "Retrieve a user",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation response a UserDTO as data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/user/{email}",
        produces = { "application/json" }
    )
    default ResponseEntity<ResponseContainerResponseDTO> retrieveUserbyEmail(
        @Parameter(name = "email", description = "the user email", required = true) @PathVariable("email") String email
    ) {
        return getDelegate().retrieveUserbyEmail(email);
    }


    /**
     * PUT /users/user/{userDni} : Update user
     * Update a user, authentication required.
     *
     * @param userDni the user dni (required)
     * @param userDTO Updated user object (optional)
     * @return successful operation response a UserDTO as data (status code 200)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "updateUser",
        summary = "Update user",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation response a UserDTO as data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContainerResponseDTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/user/{userDni}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ResponseContainerResponseDTO> updateUser(
        @Parameter(name = "userDni", description = "the user dni", required = true) @PathVariable("userDni") Integer userDni,
        @Parameter(name = "UserDTO", description = "Updated user object") @Valid @RequestBody(required = false) UserDTO userDTO
    ) {
        return getDelegate().updateUser(userDni, userDTO);
    }

}
